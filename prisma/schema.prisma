// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  enrollments    Enrollment[]
  submissions    Submission[]
  payments       Payment[]
  LessonProgress LessonProgress[]
}

enum Role {
  ADMIN
  STUDENT
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  price       Int // amount in smallest currency unit (e.g., paise)
  currency    String   @default("INR")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modules     Module[]
  enrollments Enrollment[]
  assignments Assignment[]
}

model Module {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id])
  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  moduleId  String
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module         Module           @relation(fields: [moduleId], references: [id])
  resources      Resource[]
  LessonProgress LessonProgress[]

  @@index([moduleId])
}

model Resource {
  id       String       @id @default(cuid())
  lessonId String
  type     ResourceType
  fileKey  String // storage key in S3/R2
  filename String
  size     Int

  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@index([lessonId])
}

enum ResourceType {
  PDF
  DOC
  DOCX
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  paymentId String?
  createdAt DateTime         @default(now())

  user    User     @relation(fields: [userId], references: [id])
  course  Course   @relation(fields: [courseId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

enum EnrollmentStatus {
  ACTIVE
  PENDING
  CANCELLED
}

model Payment {
  id        String   @id @default(cuid())
  provider  String   @default("razorpay")
  orderId   String   @unique
  amount    Int
  currency  String   @default("INR")
  status    String
  userId    String
  createdAt DateTime @default(now())

  user       User         @relation(fields: [userId], references: [id])
  enrollment Enrollment[]

  @@index([userId])
}

model Assignment {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  description String?
  dueAt       DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@index([courseId])
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  userId       String
  fileKey      String
  status       SubmissionStatus @default(SUBMITTED)
  feedback     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([assignmentId])
  @@index([userId])
}

enum SubmissionStatus {
  SUBMITTED
  REVIEWED
  REVISE
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  tags      String? // comma-separated for simplicity in v1
  createdAt DateTime @default(now())
}

model Newsletter {
  id        String           @id @default(cuid())
  title     String
  content   String // markdown or HTML
  status    NewsletterStatus @default(DRAFT)
  createdAt DateTime         @default(now())
  sentAt    DateTime?
}

enum NewsletterStatus {
  DRAFT
  SENT
}

/// Tracks per-user lesson completion
model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}
